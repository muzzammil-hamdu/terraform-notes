# Notes: Infrastructure as Code (IaC) & Terraform

## Agenda
- **Infrastructure as Code (IaC)**: Automate the provisioning, configuration, and management of IT resources using code.
- Manage all service models: **IaaS (Infrastructure as a Service), PaaS (Platform as a Service), SaaS (Software as a Service)**.

## Key Characteristics of IaC
- **Predefined structure**: Resources are described with code in a consistent, organized format.
- **Versioning**: All infrastructure definitions are version-controlled, usually via Git.
- **Immutable resources**: Resources are not modified in place; instead, changes result in new deployments.

## Tool Categories

| Category                | Service Model | Purpose                                              | Examples      | Go-To Example |
|-------------------------|--------------|------------------------------------------------------|---------------|---------------|
| Configuration Management| PaaS         | Install/configure software & apps                    | Ansible, Chef, Puppet, Salt Stack | Ansible       |
| Server Templating       | SaaS         | Prebuilt templates & libraries, often with containers| Docker, containerd, CRI-O, Packer | Docker        |
| Provisioning Tools      | IaaS         | Create/manage cloud and on-prem resources            | Terraform, ARM, CloudFormation     | Terraform     |

### Configuration Management (e.g., Ansible)
- Automates the installation and configuration of software on servers.
- Best for maintaining running systems and ensuring their configuration matches the code.

### Server Templating (e.g., Docker)
- Provides templates with predefined applications and libraries.
- Supports containerization (packaging applications + dependencies together).

### Provisioning (e.g., Terraform)
- Automates creation, modification, and termination of infrastructure resources across cloud and on-premises environments.

## Terraform Overview

- **Terraform** is an *open-source IaC tool* developed by HashiCorp.
- Uses **HashiCorp Configuration Language (HCL)**, which is easy to read and write.
- **Supports libraries and plugins** (called "providers") for multiple platforms (AWS, Azure, GCP, etc.).
- **Platform-agnostic**: delivers consistent behavior across all platforms.
- **Manages IaaS, PaaS, and SaaS resources**.

## Terraform Installation

### For Ubuntu/Linux

**Prerequisites**:
```bash
sudo apt-get update && sudo apt-get install -y gnupg software-properties-common
```

**Add HashiCorp GPG Key**:
```bash
wget -O- https://apt.releases.hashicorp.com/gpg | \
    gpg --dearmor | sudo tee /usr/share/keyrings/hashicorp-archive-keyring.gpg > /dev/null
```

**Add Repository**:
```bash
echo "deb [signed-by=/usr/share/keyrings/hashicorp-archive-keyring.gpg] \
https://apt.releases.hashicorp.com $(lsb_release -cs) main" | \
sudo tee /etc/apt/sources.list.d/hashicorp.list
```

**Update & Install**:
```bash
sudo apt-get update
sudo apt-get install terraform
```

**Verify Installation**:
```bash
terraform -v
```

### For Windows

- Download the Terraform binary:  
  `https://releases.hashicorp.com/terraform/1.12.2/terraform_1.12.2_windows_386.zip`
- Extract the ZIP file.
- Add the extracted folder to your system's `PATH` (Environment Variables).
- Open Command Prompt and run:
  ```
  terraform -v
  ```
  to verify successful installation.

## Summary

- **IaC** allows you to control infrastructure in a standardized, repeatable, and automated way.
- **Terraform** is a powerful, open-source tool supporting a wide range of infrastructure platforms and services, using a platform-agnostic and provider-driven approach.
- Installing Terraform involves adding its official repository, installing the package, and verifying the install, with different steps for Linux and Windows systems.

This setup gives you a foundation to continuously automate and manage your infrastructure using code, ensuring reliability, repeatability, and scalability.
